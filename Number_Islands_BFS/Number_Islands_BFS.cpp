#include <iostream>
#include <vector>

using namespace std;


class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int count = 0, M = grid.size(), N = grid[0].size();

        if (grid.size() == 1 && grid[0].size() == 1 && grid[0][0] == '1')
            return 1;


        for (int i=0; i < M; i++) {
            for (int j=0; j < N; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    DFS(grid, i, j, M, N);
                }
            }
        }  

        return count; 
    }

    void DFS(vector<vector<char>>& grid, int i, int j, const int& M, const int& N) {
            if (i < 0 || i >= M || j < 0 || j >= N || grid[i][j] == '0')
                return;
            
            grid[i][j] = '0';
            DFS(grid, i+1, j, M, N);
            DFS(grid, i-1, j, M, N);
            DFS(grid, i, j+1, M, N);
            DFS(grid, i, j-1, M, N);
            return;
    }
};

int main() {
    Solution solution;
    vector<vector<char>> grid = {
        // {'1','1','1','1','0'},
        // {'1','1','0','1','0'},
        // {'1','1','0','0','0'},
        // {'0','0','0','0','0'}

        // {'1','1','0','0','0'},
        // {'1','1','0','0','0'},
        // {'0','0','1','0','0'},
        // {'0','0','0','1','1'}

        // {'1','1','1',},{'0','1','0'},{'1','1','1'}
        // {'1'},{'1'}

        // {'1', '0', '1', '1', '1'},
        // {'1', '0', '1', '0', '1'},
        // {'1', '1', '1', '0', '1'}

        {{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}}
    };

    std::cout << solution.numIslands(grid);
    return 0;
}
